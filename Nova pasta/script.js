// --- Dados da simula√ß√£o ---
const PARTICIPANTS = ['Eduarda', 'Emilia', 'Karol', 'Kelvin', 'Lucas', 'Neto', 'Paulo', 'Richardson'];
const EMOJIS = ['‚ù§Ô∏è', 'üêç', 'üí£', 'üí©', 'üëë'];
const ADMIN_USER = 'Gerente';

// Objeto para armazenar os votos
let votes = {};
// Objeto para controlar quem j√° votou
let hasVoted = {};
PARTICIPANTS.forEach(name => hasVoted[name] = false);

let activeUser = null;

// Inicializa o objeto de votos
function initializeVotes() {
    PARTICIPANTS.forEach(participant => {
        votes[participant] = {};
        EMOJIS.forEach(emoji => {
            votes[participant][emoji] = 0;
        });
    });
}
initializeVotes();

// --- Fun√ß√µes de UI (User Interface) ---

// Fun√ß√£o para exibir a tela correta
function displayView(viewId) {
    const views = ['login-view', 'voter-view', 'admin-view'];
    views.forEach(view => {
        document.getElementById(view).classList.add('hidden');
    });
    document.getElementById(viewId).classList.remove('hidden');
}

// Preenche o campo de sele√ß√£o de participantes
function populateParticipants() {
    const select = document.getElementById('participant-select');
    select.innerHTML = '<option value="">-- Escolha um participante --</option>';
    PARTICIPANTS.forEach(participant => {
        const option = document.createElement('option');
        option.value = participant;
        option.textContent = participant;
        select.appendChild(option);
    });
}

// --- Fun√ß√µes de L√≥gica ---

// Lida com o login do usu√°rio
function login(user) {
    activeUser = user;
    if (activeUser === ADMIN_USER) {
        renderAdminUI();
        displayView('admin-view');
    } else {
        document.getElementById('voter-name').textContent = `Ol√°, ${activeUser}!`;
        populateParticipants();
        updateVoterStatus();
        displayView('voter-view');
    }
}

// Lida com o logout
function logout() {
    activeUser = null;
    document.getElementById('vote-message').textContent = '';
    displayView('login-view');
}

// Gerencia a sele√ß√£o de emoji no formul√°rio de vota√ß√£o
let selectedEmoji = null;
function selectEmoji(emoji) {
    selectedEmoji = emoji;
    document.getElementById('selected-emoji-display').textContent = `Emoji selecionado: ${emoji}`;
}

// Lida com a submiss√£o do voto
function submitVote() {
    const participant = document.getElementById('participant-select').value;
    const message = document.getElementById('vote-message');

    if (!participant) {
        message.textContent = 'Selecione um participante para votar.';
        return;
    }
    if (!selectedEmoji) {
        message.textContent = 'Selecione um emoji para votar.';
        return;
    }

    if (hasVoted[activeUser]) {
        message.textContent = 'Voc√™ j√° votou nesta rodada!';
        return;
    }

    votes[participant][selectedEmoji]++;
    hasVoted[activeUser] = true;
    message.textContent = 'Voto registrado com sucesso!';
    updateVoterStatus();
}

// Atualiza a visualiza√ß√£o do bot√£o de vota√ß√£o para o votante
function updateVoterStatus() {
    const submitBtn = document.getElementById('submit-vote-btn');
    if (hasVoted[activeUser]) {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Voc√™ j√° votou!';
    } else {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Votar!';
    }
}

// Renderiza a interface do administrador com os resultados
function renderAdminUI() {
    const resultsDisplay = document.getElementById('results-display');
    resultsDisplay.innerHTML = ''; // Limpa os resultados antigos

    PARTICIPANTS.forEach(participant => {
        const participantDiv = document.createElement('div');
        participantDiv.className = 'participant-results';
        
        const nameHeading = document.createElement('h3');
        nameHeading.textContent = participant;
        participantDiv.appendChild(nameHeading);

        const sortedEmojis = Object.entries(votes[participant]).sort(([, a], [, b]) => b - a);

        sortedEmojis.forEach(([emoji, count]) => {
            const emojiRow = document.createElement('div');
            emojiRow.className = 'result-emoji-row';
            emojiRow.innerHTML = `<span>${emoji}</span>: ${count} votos`;
            participantDiv.appendChild(emojiRow);
        });
        resultsDisplay.appendChild(participantDiv);
    });
}

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', () => {
    displayView('login-view');
});